import java.util.*;
import java.lang.*;
import java.io.*;

class Codechef
{ 
    // Sliding window
    // tc -  O(n) (to compute XOR) 
    // sc - O(n) (for bestXor)
	public static void main (String[] args) throws java.lang.Exception
	{
		String currentKey = "0011110";
		String rotatedKey = "1111000";
		System.out.print(optimalXor(currentKey,rotatedKey));

	}
	
	public static String optimalXor(String currentKey, String rotatedKey){
	    int maxOnes = -1;
	    String bestXor = "";
	    String doubled = rotatedKey + rotatedKey;
	    int n = currentKey.length();
	    for(int i=0;i<n;i++){
	        String rotation = doubled.substring(i,i+n);
	        String xor = rotatedXor(currentKey,rotation);
	        int one = xor.replace("0","").length();
	        
	        if(one > maxOnes || (one == maxOnes && xor.compareTo(bestXor) > 0 )){
	            maxOnes = one;
	            bestXor = xor;
	        }
	        
	    }
	    return bestXor;
	}
	
	
	public static String rotatedXor(String currentKey, String rotatedKey){
	    StringBuilder result = new StringBuilder();
	    
	    
	    for(int i=0;i<rotatedKey.length();i++){
	        result.append(currentKey.charAt(i) == rotatedKey.charAt(i) ? '0' : '1');
	    }
	    return result.toString();
	}
}
