Binary Tree Level Order Traversal II
------------------------------------
Time Complexity - O(n + L)
where O(L) = number of levels,computed while reversing
Space Complexity - O(w) 
where O(w) = max width of tree
------------------------------------
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> ans = new ArrayList<>();
        if(root == null){return ans;}
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);
        // Performing level order traversal using queue
        while(!q.isEmpty()){
            int size =q.size();
            List<Integer> res = new ArrayList<>();
        for(int i=0;i<size;i++){
            
            TreeNode current = q.poll();
            res.add(current.val);
            if(current.left != null){q.offer(current.left);}   
            if(current.right != null){q.offer(current.right);}      
        }
        ans.add(res);
        }
        // Reversing the array list to get output in leaf to root
        Collections.reverse(ans);
        return ans;
    }
}
