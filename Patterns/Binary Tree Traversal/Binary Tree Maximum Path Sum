Binary Tree Maximum Path Sum
----------------------------
Time Complexity - O(N)
Space Complexity - O(N)
----------------------------

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    private int maxSum = Integer.MIN_VALUE;
    public int maxPathSum(TreeNode root) {
        
        maxSumPath(root);
        return maxSum;
        
    }
    public int maxSumPath(TreeNode root){
        if(root == null){
            return 0;
        }
        // Finding the left and right nodes having the maximum value
        int leftGain = Math.max(maxSumPath(root.left),0);
        int rightGain = Math.max(maxSumPath(root.right),0);
  
        int currentPathSum = root.val + leftGain + rightGain; 
        // Comparing current path sum with maxSum
        maxSum = Math.max(maxSum, currentPathSum);
        // Traversing the direction of maximum gain
        return root.val + Math.max(leftGain,rightGain);

    }
}
