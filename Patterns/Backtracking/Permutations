Permutations
-----------------------
Time Complexity - O(n!)
Space Complexity - O(n)
-----------------------

class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        recur(nums,ans,0);
        return ans;
    }
    public void recur(int[] nums,List<List<Integer>> ans, int index){
        if(nums.length == index){
            List<Integer> res = new ArrayList<>();
            for(int i=0;i<nums.length;i++){
                res.add(nums[i]);
            }
            ans.add(res);
            return;
        }
        for(int i=index;i<nums.length;i++){
            swap(nums,i,index);
            recur(nums,ans,index+1);
// Backtracking traversed permutation
            swap(nums,i,index);
        }
    }
    public void swap(int[] nums,int i,int j){
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}
