Number of Islands
--------------------------
Time Complexity - O(n*m)
Space Complexity - O(n*m)
where n = no. of rows
m = no. of columns
--------------------------
class Solution {
    public int numIslands(char[][] grid) {
        if(grid == null || grid.length == 0){
            return 0;
        }
        int row = grid.length;
        int column = grid[0].length;
        int count = 0;

        int[][] directions = {
            {-1,0},
            {1,0},
            {0,1},
            {0,-1}
        };
// Since first occurence of 1 in grid isn't provided hence traversal loop across entire grid is performed 
        for(int i=0;i<row;i++){
            for(int j=0;j<column;j++){
                if(grid[i][j] == '1'){
                    count++;
                    Queue<int[]> q = new LinkedList<>();
                    q.offer(new int[]{i,j});
// Conversion of 1 to 0 is required to avoid repetition in counting
                    grid[i][j] = '0';
                    while(!q.isEmpty()){
                        int size = q.size();
                        int[] num = q.poll();
                        for(int[] dir: directions){
                            
                            int newR = num[0] + dir[0];
                            int newC = num[1] + dir[1];
                            if(newR >= 0 && newR < grid.length && newC >= 0 && newC < grid[0].length && grid[newR][newC] == '1'){
                                q.offer(new int[]{newR, newC});
                                grid[newR][newC] = '0';
                            }
                        }
                    }
                }
            }
        }
        return count;
    }
}
