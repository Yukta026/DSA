Surrounded Regions using BFS
-------------------------
Time Complexity - O(m*n)
Space Complexity - O(m*n)
-------------------------
class Solution {
    public void solve(char[][] board) {
        if(board == null || board.length == 1){
            return;
        }
        int rows = board.length;
        int cols = board[0].length;

        Queue<int[]> q = new LinkedList<>();

        for(int i=0;i<board.length;i++){
            if(board[i][0] == 'O') {q.offer(new int[]{i,0});}
            if(board[i][cols-1] == 'O') {q.offer(new int[]{i,cols-1});}
        }

        for(int j=0;j<board[0].length;j++){
            if(board[0][j] == 'O') {q.offer(new int[]{0,j});}
            if(board[rows-1][j] == 'O') {q.offer(new int[]{rows-1,j});}
        }

        int[][] directions = { {1,0}, {-1,0}, {0,-1}, {0,1}};
        while(!q.isEmpty()){
            int[] cell = q.poll();
            int r = cell[0];
            int c = cell[1];
            
            board[r][c] = '#';
            for(int[] dir : directions){
                int newR = r + dir[0];
                int newC = c + dir[1];
                if(newR < 0 || newR >= board.length || newC < 0 || newC >= board[0].length || board[newR][newC] != 'O'){
                continue;
            }
                    q.offer(new int[]{newR,newC});
                }
            }

        
        for(int i = 0; i< rows;i++){
            for(int j =0;j< board[0].length;j++){
                if(board[i][j] == 'O'){
                    board[i][j] = 'X';
                }
                else if(board[i][j] == '#'){
                    board[i][j] = 'O';
                }
            }
        }
    }
    
}
