Clone Graph
---------------------------
Time Complexity - O(N), 
Space Complexity - O(N)
 N -> no. of edges + nodes
---------------------------
/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> neighbors;
    public Node() {
        val = 0;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val) {
        val = _val;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val, ArrayList<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}
*/

class Solution {
    private Map<Node,Node> visited = new HashMap<>();
    public Node cloneGraph(Node node) {
        if(node == null){
            return null;
        }
        // Base case: To prevent re-cloning and cycles
        if(visited.containsKey(node)){
            return visited.get(node);
        }
        Node clone = new Node(node.val,new ArrayList<>());
        // Memoization to store already visited nodes
        visited.put(node,clone);

        for(Node neighbor: node.neighbors){
            // Deep clones that neighbour not already visited
            clone.neighbors.add(cloneGraph(neighbor));
        }
        return clone;
    }
}
