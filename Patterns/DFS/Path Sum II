Path Sum II
------------------------------
Time Complexity - O(N)
Space Complexity - O(H + K*H)
where K = valid paths
and H = height of tree
-----------------------------
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> path = new ArrayList<>();
        targetPath(root,ans,targetSum,path);
        return ans;
    }
    public void targetPath(TreeNode root,List<List<Integer>> ans,int remainingVal,List<Integer> path){
        if(root == null){return;}
        path.add(root.val);
        // Add path only when leaf node found and targetSum met
        if(root.left == null && root.right == null && remainingVal == root.val){
            ans.add(new ArrayList<>(path));
        }
        // Traverse the left and right nodes and reduce current node value from targetSum
        else{
            targetPath(root.left,ans,remainingVal - root.val,path);
            targetPath(root.right,ans,remainingVal - root.val,path);
        }
        path.remove(path.size()-1);
    }
}
