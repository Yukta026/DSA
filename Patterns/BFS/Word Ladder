Word Ladder
------------------------------------
Time Complexity - O(N*L)
Space Complexity - O(N*L)
where N - no. of words in wordList
and L - Length of each word
------------------------------------


class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        Set<String> wordSet = new HashSet<>(wordList);
        if (!wordSet.contains(endWord)) {
            return 0;
        }

        Queue<String> q = new LinkedList<>();
        Set<String> visited = new HashSet<>();

        q.offer(beginWord);
        visited.add(beginWord);
        int steps = 1;

        while (!q.isEmpty()) {
            int size = q.size();

            for (int i = 0; i < size; i++) {
                String word = q.poll();
                char[] chars = word.toCharArray();

                for (int j = 0; j < chars.length; j++) {
                    char originalChar = chars[j];

                    for (char c = 'a'; c <= 'z'; c++) {
                        if (c == originalChar) continue; // skip same letter

                        chars[j] = c;
                        String transformed = new String(chars);

                        if (transformed.equals(endWord)) {
                            return steps + 1;
                        }

                        if (wordSet.contains(transformed) && !visited.contains(transformed)) {
                            q.offer(transformed);
                            visited.add(transformed);
                        }
                    }

                    chars[j] = originalChar; // revert back
                }
            }

            steps++;
        }

        return 0; // no transformation path found
    }
}
