Rotting Oranges
--------------------------
Time Complexity - O(m*n)
Space Complexity - O(m*n)
--------------------------
class Solution {
    public int orangesRotting(int[][] grid) {
        Queue<int[]> q= new LinkedList<>();
        int freshCount = 0;
// Entering all rotten oranges to queue and counting total number of fresh oranges
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                if(grid[i][j] == 2){
                    q.offer(new int[]{i,j});
                }
                else if(grid[i][j] == 1){
                    freshCount++;
                }
            }
        }
// Directions to check for fresh oranges in 4-way across rotten oranges
        int[][] directions = {
            {0,-1}, // left
            {0,1}, // right
            {1,0}, // down
            {-1,0} // up
        };
        int minutes = 0;
        while(!q.isEmpty()){
          int q_size = q.size();
          for(int i=0;i<q_size;i++){
            int[] pos = q.poll();
            int r = pos[0];
            int c = pos[1];
           // look in all four directions of rotten oranges
            for(int[] dir: directions){
                int newR = r + dir[0];
                int newC = c + dir[1];
                if(newR >= 0 && newR < grid.length && newC >= 0 && newC < grid[0].length
                && grid[newR][newC] == 1){
                    grid[newR][newC] = 2;
                    q.offer(new int[]{newR,newC});
                    freshCount--;
                }
            }
          }
          minutes++;
        }
// If no more fresh oranges present then final answer should be minutes -1 as the loop will run one final time as 
// it would contain final set of rotten orange but no fresh oranges to rot
        return freshCount == 0 ? Math.max(0, minutes-1) : -1;
    }
}
