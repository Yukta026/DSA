Contiguous Array
-------------------------
Time  Complexity - O(N)
Space Complexity - O(N)
------------------------
class Solution {
    public int findMaxLength(int[] nums) {
        int n = nums.length+1;

        // Map to store first occurrence index of each prefix sum
        Map<Integer,Integer> map = new HashMap<>();
        // Base case: prefix sum 0 at index -1 to handle subarrays starting from 0
        map.put(0,-1);
        int prefixSum = 0;
        int maxLength = 0;

        for(int i=0;i<nums.length;i++){
            // Convert 0 -> -1 to use prefix sum technique
            prefixSum += nums[i] == 0 ? -1 : 1;

            if(map.containsKey(prefixSum)){
                // If the prefix sum was seen before, a balanced sub array exists
                maxLength = Math.max(maxLength, i-map.get(prefixSum));
            }
            else{
                // Mark the first occurrence of prefix sum  
                map.put(prefixSum,i);
            }
        }
        return maxLength;
    }
}
