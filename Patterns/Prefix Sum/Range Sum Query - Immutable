Range Sum Query - Immutable
--------------------------
Time Complexity - O(N)
Space Complexity - O(N)
--------------------------

class NumArray {
// Stores prefix sums where prefixSums[i] = nums[0] to nums[i-1] 
    private int[] prefixSum;
    public NumArray(int[] nums) {
       prefixSum = new int[nums.length+1];
//  Array = [-2,0,3,-5,2,-1]
// prefixSum = [0,-2,-2,1,-4,-2,-3]
       for(int i=0;i<nums.length;i++){
        prefixSum[i+1] = prefixSum[i] + nums[i];
       }
    }

// Returns the sum of indices between left and right(inclusive)    
    public int sumRange(int left, int right) {
        return prefixSum[right+1] - prefixSum[left];
    }
}

/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray obj = new NumArray(nums);
 * int param_1 = obj.sumRange(left,right);
 */
