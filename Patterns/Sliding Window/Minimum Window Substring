Minimum Window Substring
------------------------
Time Complexity - O(M+N)
where m = length of string s
      n = length of string t

Space Complexity - O(N) 
where N - character set 
-----------------------
class Solution {
    public String minWindow(String s, String t) {
        if(s.length() < t.length()){
            return "";
        }
        Map<Character,Integer> tMap = new HashMap<>();
// Placing character frequencies in map tMap 
        for(int i=0;i<t.length();i++){
            char c= t.charAt(i);
            tMap.put(c,tMap.getOrDefault(c,0)+1);
        }
        Map<Character,Integer> windowMap = new HashMap<>();
        int minLength = Integer.MAX_VALUE;
        int need = tMap.size();
        int left = 0;
        int resLeft = 0;
        int have = 0;
// Placing character frequencies in map windowMap
        for(int right=0;right<s.length();right++){
            char c= s.charAt(right);
            windowMap.put(c,windowMap.getOrDefault(c,0)+1);
// Incrementing value of have when character frequencies of both maps match
            if(tMap.containsKey(c) && tMap.get(c).intValue() == windowMap.get(c).intValue()){
                have++;
            }
// Shrinking window by incrementing left pointer untill have is equal to need
            while(have == need){
                if(right-left+1 < minLength){
                    minLength = right-left+1;
                    resLeft = left;
                }
                char resChar = s.charAt(left);
                windowMap.put(resChar,windowMap.get(resChar)-1);
                if(tMap.containsKey(resChar) && windowMap.get(resChar).intValue() < tMap.get(resChar).intValue()){
                    have--;
                }
                left++;
            }
        }
        return minLength == Integer.MAX_VALUE ? "":s.substring(resLeft,resLeft+minLength);
    }
}
