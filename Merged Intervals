class Solution {
    public int[][] merge(int[][] intervals) {
        int m = intervals.length;
        int n = intervals[0].length;
        Arrays.sort(intervals,(a,b) -> Integer.compare(a[0],b[0])); 
        List<int[]> merged = new ArrayList<>(); 
        int[][] ans = new int[m][n];
        int end = intervals[0][1];
        int j=0;
        for(int[] interval: intervals){
            if(merged.isEmpty() || merged.get(merged.size() -1)[1] < interval[0]){
                merged.add(interval);
            }
            else{
                merged.get(merged.size() -1)[1] = Math.max(merged.get(merged.size()-1)[1],interval[1]);
            }
        }
        return merged.toArray(new int[merged.size()][]);
    }
}
// tc = O(n logn)
// sc = O(n)
