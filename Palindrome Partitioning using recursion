Palindrome Partitioning using recursion
------------------------------------------------
Time Complexity: O((2^n)*(k)*(n/2))
-- 2^n - for substrings
-- k - inserting string to another data struc.
-- n/2 - for checking palindrome

Space Complexity: O(k*x)
-- k - avg.length
-- x - possible combinations

Auxilliary Space: O(n)
-- recursive path partitioning space

------------------------------------------------
class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> ans = new ArrayList<>();
        List<String> ds = new ArrayList<>();
        recur(0,s,ans,ds);
        return ans;
    }
    public void recur(int index,String s,List<List<String>> ans, List<String> ds){
        if(index == s.length()){
            ans.add(new ArrayList<>(ds));
            return;
        }
        for(int i=index;i<s.length();i++){
            String str = s.substring(index,i+1);
            if(isPalin(str)){
              ds.add(str);
              recur(i+1,s,ans,ds);
              ds.remove(ds.size()-1);
            }
        }
    }
    public Boolean isPalin(String s){
        int start = 0;
        int end = s.length()-1;
        while(start<=end){
            if(s.charAt(start++) != s.charAt(end--)){
                return false;
            }
            
        }
        return true;
    } 
}
