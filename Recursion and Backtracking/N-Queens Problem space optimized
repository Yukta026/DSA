N-Queens Problem using hashing
------------------------------
Time Complexity: O(N!*N)
Space Complexity: O(N)
-----------------------------
class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> ans = new ArrayList<>();
        char[][] board = new char[n][n];
        int[] leftRow = new int[n];
        int[] upperDiagonal = new int[2*n -1];
        int[] lowerDiagonal = new int[2*n -1];
        for(int i=0;i<board.length;i++){
            Arrays.fill(board[i],'.');
        }
        
        recur(0,board,ans,n,leftRow,upperDiagonal,lowerDiagonal);
        return ans;
    }
    public void recur(int col,char[][] board,List<List<String>> ans,int n,int[] leftRow,int[] upperDiagonal,int[] lowerDiagonal){
        if(col == n){
           List<String> ds = new ArrayList<>();
           for(int i=0;i<board.length;i++){
             ds.add(new String(board[i]));
           }
           ans.add(ds);
        }
        for(int row=0;row<n;row++){
                if(leftRow[row]==0 && upperDiagonal[board.length -1 + col - row] == 0 && lowerDiagonal[row+col] == 0){
                    board[row][col] = 'Q';
                    leftRow[row]= 1;
                    upperDiagonal[board.length -1 + col - row] = 1;
                    lowerDiagonal[row+col] = 1;
                    recur(col+1,board,ans,n,leftRow,upperDiagonal,lowerDiagonal);
                    board[row][col] = '.';
                    leftRow[row]= 0;
                    upperDiagonal[board.length -1 + col - row] = 0;
                    lowerDiagonal[row+col] = 0;
                }     
        }
    }
}
