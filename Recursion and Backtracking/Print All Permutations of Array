Print All Permutations of a String/Array
-------------------------------------------
Time Complexity: O(N!) * O(N)
Space Complexity: O(N)*O(N)
-------------------------------------------
class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        boolean[] freq = new boolean[nums.length];
        recur(nums,ans,new ArrayList<Integer>(),freq);
        return ans;
    }
    public void recur(int[] nums, List<List<Integer>> ans,List<Integer> ds,boolean[] freq){
        if(nums.length ==ds.size()){
            ans.add(new ArrayList<Integer>(ds) );
            return;
        }
        for(int i=0;i<nums.length;i++){
            if(!freq[i]){
            ds.add(nums[i]);
            freq[i]= true;
            recur(nums,ans,ds,freq);
            ds.remove(ds.size()-1);
            freq[i] = false;
            }
        }
        
    }
    public void swap(int[] nums,int i,int j){
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}
