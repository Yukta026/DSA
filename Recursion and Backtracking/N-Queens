N-Queens
-------------------------
Time Complexity: O(N!*N)
Space Complexity: O(N^2)
-------------------------
class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> ans = new ArrayList<>();
        char[][] board = new char[n][n];
        for(int i=0;i<board.length;i++){
            Arrays.fill(board[i],'.');
        }
        
        recur(0,board,ans,n);
        return ans;
    }
    public void recur(int row,char[][] board,List<List<String>> ans,int n){
        if(row == n){
           List<String> ds = new ArrayList<>();
           for(int i=0;i<board.length;i++){
             ds.add(new String(board[i]));
           }
           ans.add(ds);
        }
        for(int col=0;col<n;col++){
                if(isSafe(row,col,board,n)){
                    board[row][col] = 'Q';
                    recur(row+1,board,ans,n);
                    board[row][col] = '.';
                }     
        }
    }
    public boolean isSafe(int row,int col,char[][] board,int n){
       for(int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {
        if(board[i][j] == 'Q') return false;
    }

    // Check upper-right diagonal
    for(int i = row - 1, j = col + 1; i >= 0 && j < n; i--, j++) {
        if(board[i][j] == 'Q') return false;
    }

    // Check the same column above
    for(int i = row - 1; i >= 0; i--) {
        if(board[i][col] == 'Q') return false;
    }

    return true;
    }
}
