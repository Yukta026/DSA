Combination Sum II - Find all unique combinations using recursion
------------------------------------------------------------------------
Time  Complexity : O(2^n*k)
Space Complexity: O(k*x) where k = avg. length, x= possible combinations
------------------------------------------------------------------------
class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> ans = new ArrayList<>();
        Arrays.sort(candidates);
        recur(0,target,candidates,new ArrayList<>(), ans);
        return ans;
    }
    public void recur(int index,int target,int[] candidates, List<Integer> ds,List<List<Integer>> ans){
      
        if(target ==0 ){
                ans.add(new ArrayList<>(ds));
                return;
            }
            
        
        for(int i = index;i<candidates.length;i++){
            if(i > index && candidates[i] == candidates[i-1]){
                continue;
            }
            if(candidates[i] > target){
                break;
            }
        
        ds.add(candidates[i]);
        recur(i+1,target-candidates[i],candidates,ds,ans);
        ds.remove(ds.size()-1);
        }
        }
    }
