import java.util.*;
import java.lang.*;
import java.io.*;

// 0/1 Knapsack - dynamic programming
// tc = O(n * target)
// sc = O(target)
class Codechef
{   static int minCount = Integer.MAX_VALUE;
	public static void main (String[] args) throws java.lang.Exception
	{
		
		
		List<Integer> server = new ArrayList<Integer>();
		server.add(5);
		server.add(1);
		server.add(1);
		server.add(2);
		server.add(4);
		server.add(4);
        int target = 10;
        int[] dp = new int[target+1];
        Arrays.fill(dp,Integer.MAX_VALUE);
        dp[0] = 0;
        
        for(int num:server){
            for(int j=target; j>= num;j--){
                if(dp[j-num] != Integer.MAX_VALUE){
                    dp[j] = Math.min(dp[j], dp[j-num]+1);
                }
            }
        }
        System.out.print(dp[target] == Integer.MAX_VALUE ? -1 : dp[target]);
	}
	
	
}
