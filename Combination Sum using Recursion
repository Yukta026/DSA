Combination Sum using Recursion
--------------------------------------------------------------------------------------------
Time complexity: O(2^t * x) (where t is target to pick and not pick and x is avg. length)
Space complexity: O(k*x) (where k is avg length and x is no. of possible combinations)
--------------------------------------------------------------------------------------------
class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> list = new ArrayList<>();
        recur(candidates,target,0,new ArrayList<> (),ans);
        return ans;
    }

    public void recur(int[] candidates,int target,int index,List<Integer> list,List<List<Integer>> ans){
        if(index==candidates.length){
        if(target == 0){
            ans.add(new ArrayList<>(list));
            }
            return;
        }
       
        if(target >= candidates[index]){
            list.add(candidates[index]);
            recur(candidates,target-candidates[index],index,list,ans);
            list.remove(list.size()-1);
            
        }
        recur(candidates,target,index+1,list,ans);
    }
}
